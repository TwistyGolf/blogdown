import { app, BrowserWindow, dialog, ipcMain, Menu } from "electron";

import {
    cloneFile,
    createFile,
    deleteFile,
    Directory,
    lastOpenProject,
    openProject,
} from "./projectManager";

import "./preload";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    // eslint-disable-line global-require
    app.quit();
}
export let mainWindow: BrowserWindow;

const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        height: 600,
        width: 1200,
        frame: false,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            contextIsolation: false,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on("minimise", () => {
    mainWindow.minimize();
});

ipcMain.on("restore", () => {
    if (mainWindow.isMaximized()) {
        mainWindow.unmaximize();
    } else {
        mainWindow.maximize();
    }
});

ipcMain.on("load-last-project", () => {
    openProject(lastOpenProject(), true);
});

ipcMain.on("selectProject", () => {
    dialog.showOpenDialog({ properties: ["openDirectory"] }).then((x) => {
        console.log(x);
        if (!x.canceled) openProject(x.filePaths[0]);
    });
});

export function openModal(
    message: string,
    buttons: string[],
    title = "Blogdown"
) {
    const response = dialog.showMessageBoxSync(mainWindow, {
        title: title,
        message: message,
        buttons: buttons,
    });
    return response;
}

ipcMain.on("dir-context", (event, directory: Directory) => {
    const menu = Menu.buildFromTemplate([
        {
            label: "Create new post",
            click: async () => {
                createFile("new-post.md", directory);
            },
        },
    ]);
    menu.popup();
});

ipcMain.on("file-context", (event, file: string) => {
    const menu = Menu.buildFromTemplate([
        {
            label: "Rename",
            click: async () => {
                console.log("make file");
            },
        },
        {
            label: "Clone",
            click: async () => {
                cloneFile(file);
            },
        },
        {
            label: "Delete",
            click: async () => {
                deleteFile(file);
            },
        },
    ]);
    menu.popup();
});
